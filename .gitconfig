[github]
  user = ejima
[user]
  email = jemiam@gmail.com
  name = Manabu Ejima
[color]
  branch = auto
  diff = auto
  interactive = auto
  status = auto
  grep = auto
[push]
  default = current
[core]
  editor = nvim
  excludesfile = ~/.gitignore
  attributesfile = ~/.gitattributes
  quotepath = false
[alias]
  c  = commit
  co = checkout
  cp = cherry-pick
  cf = commit --fixup
  g  = grep
  st = status -s
  ig = clean -ndX
  lo = log --oneline
  ria = rebase -i --autosquash
  delete-merged-branches = !"git branch --merged | grep -vE '(\\*|main|master|staging|develop|development|experimental)$' | xargs -n 1 git branch -d"
  dmb = !git delete-merged-branches
  cb = rev-parse --abbrev-ref HEAD
  diffc = diff --name-only --diff-filter=U
  showpr = !"f() { git log --merges --oneline --reverse --ancestry-path $1...master | grep 'Merge pull request #' | head -n 1; }; f"
  spr = !git showpr
  openpr = "!f() { hub browse -- `git log --merges --oneline --reverse --ancestry-path $1...master | grep 'Merge pull request #' | head -n 1 | cut -f5 -d' ' | sed -e 's%#%pull/%'`; }; f"
  opr = !git openpr
  update-master = !git checkout master && git fetch --prune && git merge origin/master
  update-main = !git checkout main && git fetch --prune && git merge origin/main
  um = !git branch -r | grep -E '^ +origin/main$' >> /dev/null && git update-main || git update-master
  update-develop = !git checkout develop && git fetch --prune && git merge origin/develop
  update-development = !git checkout development && git fetch --prune && git merge origin/development
  ud = !git branch -r | grep -E '^ +origin/develop$' >> /dev/null && git update-develop || git update-development
  update-staging = !git checkout staging && git fetch --prune && git merge origin/staging
  us = !git update-staging
  udm = !git ud && git um
  bpr = !git-blame-pr.pl
  open-bpr = "!f() { r=$(git bpr $1 | peco); echo $r | cut -f2 -d ' ' | cut -c2- | xargs -I {} hub browse -- pull/{}; }; f"
  frs = !git flow release start
  frf = !git flow release finish
  cl = "!f() { dir=$(echo $1 | cut -f4 -d '/'); mkdir -p $dir; cd $dir; git clone $1; }; f"
[diff "ansible-vault"]
  textconv = ansible-vault view
  cachetextconv = true
[filter "media"]
	required = true
	clean = git media clean %f
	smudge = git media smudge %f
[filter "hawser"]
	clean = git hawser clean %f
	smudge = git hawser smudge %f
	required = true
[filter "lfs"]
	clean = git-lfs clean %f
	smudge = git-lfs smudge %f
	required = true
[ghq]
	root = ~/go/src
	root = ~/ghq
